[user]
	email = ryan@wesselstudios.com
	name = Ryan Wessel
[alias]
	a = add
	cfg = config
	c = commit
	ps = push
	rb = rebase
	mg = merge
	ch = checkout
	rs = reset
	rl = reflog
	s = status
	cfg = config
	f = fetch
	b = branch
	prune = git remote update origin --prune
	resetLastCommit = reset --soft HEAD^

        # Local Graph Log (Ex. 'git localGraph master' shows git log for only that branch)
        # i.e. it will not show commits from branches that are merged into this one.
        localGraph = "!f() { git log --graph --abbrev-commit --decorate  --first-parent ${1}; }; f"

        # Global Graph Log (Ex. 'git graph master' shows git log for that branch and all branches that are merged into master)
        graph = "!f() { git log --graph --abbrev-commit --decorate ${1}; }; f"

        # Git Commit.
        cap = "!f() { git commit -m \"$@\"; }; f"

        # NEW.
        new = "!f() { git cap \"üì¶  NEW: $@\"; }; f"
        # IMPROVE.
        imp = "!f() { git cap \"üëå  IMPROVE: $@\"; }; f"
        # FIX.
        fix = "!f() { git cap \"üêõ  FIX: $@\"; }; f"
        # RELEASE.
        rlz = "!f() { git cap \"üöÄ  RELEASE: $@\"; }; f"
        # DOC.
        doc = "!f() { git cap \"üìñ  DOC: $@\"; }; f"
        # TEST.
        tst = "!f() { git cap \"ü§ñ  TEST: $@\"; }; f"
        # BREAKING CHANGE.
        brk = "!f() { git cap \"‚ÄºÔ∏è BREAKING: $@\"; }; f"	

	# FIND ASSIGNEES BASED ON # OF LINES CHANGED PER AUTHOR FOR ALL FILES TOUCHED BY THE PROVIDED BRANCH.
	assignees = "!f() { \
		git diff --name-only $1 origin/develop | \
		xargs -n1 git blame --line-porcelain | \
		grep \"^author \" | \
		sort | \
		uniq -c | \
		sort -nr; \
	}; f"

	# FIND COUNT OF LINES OF CODE PER PROJECT CONTRIBUTOR
	contributors = "!f() { \
		git ls-files -- 'src/*' ':!:src/__mocks__/*' ':!:.snap' | \
		xargs -n1 git blame --line-porcelain | \
		grep \"^author-mail \" | \
		sort | uniq -c | sort -nr; \
	}; f"

	# Delete local branches with remote branches that have been removed
	pruneLocal = "!f() \
		for branch in $( \
			git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | \
			awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}' \
		); \
		do \
			git branch -D $branch; \
		done \
	]; f"

[core]
	excludesfile = /Users/ryanwessel/.gitignore_global
	pager = cat
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[commit]
	template = /Users/ryanwessel/.stCommitMsg
[diff]
	guitool = opendiff
